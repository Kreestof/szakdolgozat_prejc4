enum Position {
	FAILURE,
	STATE,
	DIVERGING	
}

enum Signal {
	FAILURE,
	STOP,
	GO	
}

cell struct RailwayContainer
{
	[GraphEdge]	
	List<CellId> routes;
	[GraphEdge]
	List<CellId> regions;
}

cell struct TrackElement
{
	[GraphEdge]
	List<CellId> monitors;
	[GraphEdge]
	List<CellId> connectsTo;
}

cell struct Semaphore
{
	Signal signal;
}

cell struct Route
{
	[GraphEdge]
	List<CellId> requires;
	[GraphEdge]
	List<CellId> follows;
	[GraphEdge]
	CellId entry;
	[GraphEdge]
	CellId exit;
	bool active;
	
}

cell struct Region
{
	[GraphEdge]
	List<CellId> sensors;
	[GraphEdge]
	List<CellId> elements;
}


[GraphNode, BaseType:TrackElement]
cell struct Switch
{
	Position currentPosition;
	[GraphEdge]
	List<CellId> positions;
}

cell struct Sensor {
	[GraphEdge]
	List<CellId> monitors;
}

[GraphNode, BaseType : TrackElement]
cell struct Segment {
	int length;
	[GraphNode]
	List<CellId> semaphores;
}

cell struct SwitchPosition 
{
	Position position;
	[GraphEdge]
	CellId route;
	[GraphEdge]
	CellId target;
}